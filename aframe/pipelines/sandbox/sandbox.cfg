# luigi level config
[luigi_core]
local_scheduler = true
module = aframe
log_level = INFO

# configuration for pipeline parameters

[luigi_base]
# run location parameters
run_dir = $AFRAME_RUN_DIR
data_dir = $AFRAME_DATA_DIR
ifos = ["H1", "L1"]

# data generation parameters
train_start = 1240579783
train_stop = 1241443783
test_stop = 1244035783

min_duration = 1024
max_duration = 20000
Tb = 31536000 
flag = DCS-ANALYSIS_READY_C01:1
channels = ["H1:DCS-CALIB_STRAIN_CLEAN_SUB60HZ_C01", "L1:DCS-CALIB_STRAIN_CLEAN_SUB60HZ_C01"]
shifts = [0, 1]
seed = 1122
# waveform parameters
waveform_approximant = IMRPhenomPv2
waveform_duration = 8
minimum_frequency = 20
reference_frequency = 50

# training parameters
kernel_length = 1.5
batch_size = 512
prior = data.priors.priors.end_o3_ratesandpops

# data conditioning / preprocessing parameters
sample_rate = 2048
fduration = 1
highpass = 32

# inference / export parameters  
inference_psd_length = 64
inference_sampling_rate = 4
inference_batch_size = 128

[luigi_FetchTrain]
workflow = htcondor
start = &::luigi_base::train_start
end = &::luigi_base::train_stop
sample_rate = &::luigi_base::sample_rate
min_duration = &::luigi_base::min_duration
max_duration = &::luigi_base::max_duration
flag = &::luigi_base::flag
ifos = &::luigi_base::ifos
channels = &::luigi_base::channels

[luigi_TrainWaveforms]
num_signals = 100000
sample_rate = &::luigi_base::sample_rate
waveform_duration = &::luigi_base::waveform_duration
minimum_frequency = &::luigi_base::minimum_frequency
reference_frequency = &::luigi_base::reference_frequency
waveform_approximant = &::luigi_base::waveform_approximant
prior = &::luigi_base::prior

[luigi_FetchTest]
workflow = htcondor
start = &::luigi_base::train_stop
end = &::luigi_base::test_stop
sample_rate = &::luigi_base::sample_rate
min_duration = &::luigi_base::min_duration
max_duration = &::luigi_base::max_duration
flag = &::luigi_base::flag
channels = &::luigi_base::channels


[luigi_TimeslideWaveforms]
workflow = htcondor
Tb = &::luigi_base::Tb
shifts = &::luigi_base::shifts
spacing = 16
buffer = 16
snr_threshold = 4
seed = &::luigi_base::seed
prior = &::luigi_base::prior
start = &::luigi_base::train_stop
end = &::luigi_base::test_stop
ifos = &::luigi_base::ifos
psd_length = &::luigi_base::inference_psd_length
sample_rate = &::luigi_base::sample_rate
minimum_frequency = &::luigi_base::minimum_frequency
reference_frequency = &::luigi_base::reference_frequency
waveform_duration = &::luigi_base::waveform_duration
waveform_approximant = &::luigi_base::waveform_approximant
highpass = &::luigi_base::highpass

[luigi_SandboxExport]
fduration = &::luigi_base::fduration
kernel_length = &::luigi_base::kernel_length
inference_sampling_rate = &::luigi_base::inference_sampling_rate
sample_rate = &::luigi_base::sample_rate

# TODO: resolve enum platform parsing error
# platform = luigi.Parameter(default="TENSORRT")
ifos = &::luigi_base::ifos
batch_size = &::luigi_base::inference_batch_size
psd_length = &::luigi_base::inference_psd_length
highpass = &::luigi_base::highpass

streams_per_gpu = 5
aframe_instances = 8
clean = true

[luigi_Train]
ifos = &::luigi_base::ifos
kernel_length = &::luigi_base::kernel_length
highpass = &::luigi_base::highpass
fduration = &::luigi_base::fduration
seed = &::luigi_base::seed
use_wandb = true

[luigi_SandboxInfer]
fduration = &::luigi_base::fduration
batch_size = &::luigi_base::inference_batch_size
psd_length = &::luigi_base::inference_psd_length
ifos = &::luigi_base::ifos
inference_sampling_rate = &::luigi_base::inference_sampling_rate
cluster_window_length = 8
integration_window_length = 1
Tb = &::luigi_base::Tb
shifts = &::luigi_base::shifts
clients_per_gpu = 5


# triton args
model_name = aframe-stream
model_version = -1
triton_image = hermes/tritonserver:22.12
sequence_id = 1001

[wandb]
project = aframe
entity = ml4gw
name = "end to end test"

[s3]
endpoint_url = https://s3-west.nrp-nautilus.io

[luigi_ray_worker]
replicas = 4
cpus = 16
gpus = 2
memory = 80G
min_gpu_memory = 15000

[luigi_ray_head]
cpus = 2
memory = 1G

[logging]
law: INFO 
#law.sandbox.base: DEBUG
law.patches: DEBUG

#law.workflow.base: DEBUG
